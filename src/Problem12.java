/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
 * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * <p>
 * Let us list the factors of the first seven triangle numbers:
 * <p>
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * <p>
 * What is the value of the first triangle number to have over five hundred divisors?
 */

class Problem12
{
    public Problem12()
    {
        long start = System.currentTimeMillis();
        long n = 500; // start n at some arbitrary value
        while(true) // infinite loop
        {
            if(getDivisorCount(triangleNumber(n)) > 500) // the first time this returns true, the loop will print the
            {                                            // number and break from the loop.
                System.out.println("Runtime: " + (System.currentTimeMillis() - start) + " ms");
                System.out.println(triangleNumber(n));
                break;
            }
            n++;
        }
    }
    
    private long triangleNumber(long n)
    {
        return n * (n + 1) / 2;
    }
    
    private int getDivisorCount(long n)
    {
        int num = 0;
        double sqrt = Math.sqrt((double) n);
        for(int i = 1; i <= sqrt; i++)
        {
            if((n % i) == 0)
            {
                num += 2;
            }
        }
        if(sqrt * sqrt == n)
        {
            num--;
        }
        return num;
    }
}
